### 리스트를 초기화하는 방법 중 하나 : 대괄호[] 안에 조건문과 반복문을 넣는 방식

# ex) 0~19까지의 수 중 홀수만 포함하는 리스트 생성
### range(n) : 0~(n-1)까지 범위 생성(배열 생성)
### range(start, end) : start부터 end까지의 연속적 수 배열 생성
### range(start, end, step) : start부터 end까지 step만큼 더해지는 수들의 배열 생성
arr_1 = [i for i in range(20)]
# ex) 1~9까지의 수의 제곱값을 포함하는 리스트 생성
arr_2 = [i*i for i in range(1,10)]

# 매우 효과적인 경우 : 2차원 리스트를 초기화할때
### ex) N x M 크기의 2차원 리스트 초기화
n = 3
m = 4
arr_3 = [[0]*m for _ in range(n)]

### 왜 특정 크기의 2차원 리스트를 만들때 효과적일까? -> 만약 아래 코드처럼 작성 시 오류 발생
q = 3
p = 4
arr_4 = [[0] * p] * q
### 1행1열의 값을 5로 변경
arr_4[1][1] = 5
print(arr_4)
### 이처럼 3개의 리스트가 동일 객체에 대해 참조하기 때문 -> 2차원 리스트 초기화시, 반드시 리스트 컴프리핸션 이용

# 리스트 관련 메소드
# append() : 리스트에 원소 하나 삽입 : O(1)

### sort() : 오름차순 정렬 : O(NlogN)
### sort(reverse = True) : 내림차순 정렬 : O(NlogN)

### reverse() : 리스트 원소 순서 뒤집기 : O(N)

# insert(삽입할 위치 인덱스, 삽입할 값) : 특정 인덱스 위치에 원소 삽입 : O(N)
## append()와는 달리, 시간 복잡도가 O(N)이라 남발하면 시간초과

### count(특정 값) : 리스트 내 "특정 값"을 가지는 데이터 개수를 센다 : O(N)

# remove(특정 값) : "특정 값" 원소를 제거, 여러 개라면 하나만 제거 : O(N)
## remove()도 남발하면 시간 초과
#### 만약 특정 값의 원소를 <모두> 제거하고 싶다면? - 기본함수 제공X
b = [1,2,3,4,5,5,5]
#### 사전형 이용
remove_set = {3,5}

result = [i for i in b if i not in remove_set]
print(result)